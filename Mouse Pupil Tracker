import numpy as np
import matplotlib.pyplot as plt
import imageio
from scipy import ndimage
from skimage.feature import canny
from skimage import data, color, img_as_ubyte
from skimage.feature import canny
from skimage.transform import hough_ellipse
from skimage.draw import ellipse_perimeter
import cv2
import pyqtgraph as pg
from PyQt5.QtWidgets import *
from PyQt5.QtGui import QBrush, QColor
from PyQt5.QtCore import Qt
import sys
from PIL import Image

save_base_directory = r"C:\Users\matth\Videos\Pupil\\"
image_base_directory = r"C:\Users\matth\Videos\Watching Frames\\"
pg.setConfigOptions(imageAxisOrder='row-major')

class visulisation_window(QWidget):

    def __init__(self):
        super().__init__()
        self.setWindowTitle("Pupil Tracker")


        # Create Original Image View
        self.original_widget = pg.GraphicsLayoutWidget()
        self.original_viewbox = self.original_widget.addViewBox(lockAspect=1, invertY=True)
        self.original_image = pg.ImageItem()
        self.original_viewbox.addItem(self.original_image)
        self.original_viewbox.setAspectLocked(True)

        # Threshold Image View
        self.threshold_widget = pg.GraphicsLayoutWidget()
        self.threshold_viewbox = self.threshold_widget.addViewBox(lockAspect=1, invertY=True)
        self.threshold_image = pg.ImageItem()
        self.threshold_viewbox.addItem(self.threshold_image)
        self.threshold_viewbox.setAspectLocked(True)

        # Erosion Image View
        self.erosion_widget = pg.GraphicsLayoutWidget()
        self.erosion_viewbox = self.erosion_widget.addViewBox(lockAspect=1, invertY=True)
        self.erosion_image = pg.ImageItem()
        self.erosion_viewbox.addItem(self.erosion_image)
        self.erosion_viewbox.setAspectLocked(True)

        # Reinflation Image View
        self.reinflation_widget = pg.GraphicsLayoutWidget()
        self.reinflation_viewbox = self.reinflation_widget.addViewBox(lockAspect=1, invertY=True)
        self.reinflation_image = pg.ImageItem()
        self.reinflation_viewbox.addItem(self.reinflation_image)
        self.reinflation_viewbox.setAspectLocked(True)

        # Ellipse Image View
        self.elipse_widget = pg.GraphicsLayoutWidget()
        self.elipse_viewbox = self.elipse_widget.addViewBox(lockAspect=1, invertY=True)
        self.elipse_image = pg.ImageItem()
        self.elipse_viewbox.addItem(self.elipse_image)
        self.elipse_viewbox.setAspectLocked(True)

        # Create Layout
        self.layout = QGridLayout()
        self.layout.addWidget(self.original_widget)
        self.layout.addWidget(self.threshold_widget)
        self.layout.addWidget(self.erosion_widget)
        self.layout.addWidget(self.reinflation_widget)
        self.layout.addWidget(self.elipse_widget)
        self.setLayout(self.layout)

        #self.show()
        self.showMaximized()


def track_pupil(file_location, save_directory):

    threshold_percentile = 2
    kernel_size = 5
    kernel_iterations = 5
    kernel = np.ones((kernel_size, kernel_size))

    raw_image_data = imageio.imread(file_location)
    image_data = raw_image_data[:, :, 0]
    window_instance.original_image.setImage(image_data)

    #Threshold Image
    threshold_value = np.percentile(image_data, threshold_percentile)
    thresholded_image = np.where(image_data >= threshold_value, 0, 1)
    window_instance.threshold_image.setImage(thresholded_image)

    #Erode Image
    thresholded_image = thresholded_image.astype(np.uint8)
    kernel_image = cv2.erode(thresholded_image, kernel, iterations=kernel_iterations)
    window_instance.erosion_image.setImage(kernel_image)

    #Reinflate Vision
    kernel_image = cv2.dilate(kernel_image, kernel, iterations=kernel_iterations)
    window_instance.reinflation_image.setImage(kernel_image)

    #Detect Edges
    kernel_image = kernel_image.astype(np.uint8)
    contours, hierarchy = cv2.findContours(kernel_image, 2,1)
    cnt = max(contours, key=cv2.contourArea)

    #Fit Elipse
    ellipse = cv2.fitEllipse(cnt)
    im = cv2.ellipse(raw_image_data, ellipse, (0, 255, 0), 2)
    window_instance.elipse_image.setImage(im)

    app.processEvents()


    pil_image = Image.fromarray(im)
    pil_image.save(save_directory)



if __name__ == '__main__':

    app = QApplication([])

    window_instance = visulisation_window()

    save_base_directory = r"C:\Users\matth\Videos\Pupil\\"
    image_base_directory = r"C:\Users\matth\Videos\Watching Frames\\"

    for image in range(0, 2012):
        print(image)
        file_location = image_base_directory + str(image) + ".png"
        save_directory = save_base_directory + str(image).zfill(6) + ".jpeg"
        track_pupil(file_location, save_directory)

    sys.exit(app.exec_())




